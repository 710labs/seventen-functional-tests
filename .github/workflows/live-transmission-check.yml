name: Live PROD - POS Order Transmission Check

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 10 * * *'
jobs:
  check-orders:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # If you're using *Environment* secrets, set this to your environment's name (e.g., "live-dev").
    # If you're using repo-level secrets only, you can remove this block.
    environment: live-dev

    env:
      ALWAYS_ON_URL: ${{ secrets.PROD_LIVE_URL }}   # e.g., https://live-dev.710labs.com
      LIVE_DEV_QA_AUTH: ${{ secrets.LIVE_PROD_QA_AUTH }}     #

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create and run check
        run: |
          set -euo pipefail
          cat > check-orders.mjs <<'EOF'
          import fs from "node:fs/promises";

          const baseRaw = process.env.ALWAYS_ON_URL || "";
          const auth = process.env.LIVE_DEV_QA_AUTH || "";

          if (!baseRaw) {
            console.error("❌ ALWAYS_ON_URL is not set.");
            process.exit(1);
          }
          if (!auth) {
            console.error("❌ LIVE_DEV_QA_AUTH is not set.");
            process.exit(1);
          }

          const base = baseRaw.replace(/\/+$/, "");
          const ENDPOINT = `${base}/wp-content/plugins/persy/interface/qa/orders/?auth=${encodeURIComponent(auth)}`;

          const controller = new AbortController();
          const timeout = setTimeout(() => controller.abort(), 20000); // 20s timeout

          let res;
          try {
            res = await fetch(ENDPOINT, {
              headers: { "Accept": "application/json" },
              signal: controller.signal,
            });
          } catch (err) {
            console.error(`❌ Request error: ${err.message}`);
            process.exit(1);
          } finally {
            clearTimeout(timeout);
          }

          if (!res.ok) {
            const body = await res.text().catch(() => "");
            console.error(`❌ Non-OK HTTP status ${res.status}\n${body}`);
            process.exit(1);
          }

          const text = await res.text();
          let data;
          try { data = JSON.parse(text); }
          catch {
            console.error("❌ Response was not valid JSON.");
            await fs.writeFile("orders-response.txt", text);
            process.exit(1);
          }

          await fs.writeFile("orders-response.json", JSON.stringify(data, null, 2));

          const orders = Array.isArray(data.orders) ? data.orders.slice(0, 10) : [];
          if (orders.length === 0) {
            console.error("❌ No orders returned by API.");
            process.exit(1);
          }

          // Normalize instanceId/instanceID and externalId/externalID
          const norm = orders.map(o => ({
            woocommerceId: o.woocommerceId ?? null,
            instanceId: o.instanceId ?? o.instanceID ?? null,
            instanceName: o.instanceName ?? null,
            instanceType: o.instanceType ?? null,
            externalId: o.externalId ?? o.externalID ?? null,
          }));

          const isBlank = v => v === null || v === undefined || String(v).trim() === "";

          const invalid = norm
            .map(o => {
              const missing = [];
              if (isBlank(o.instanceId))   missing.push("instanceId");
              if (isBlank(o.instanceName)) missing.push("instanceName");
              if (isBlank(o.instanceType)) missing.push("instanceType");
              if (isBlank(o.externalId))   missing.push("externalId");
              return { ...o, missing };
            })
            .filter(o => o.missing.length > 0);

          // Step summary (do not leak auth)
          const summary = [];
          summary.push(`# Order Transmission Check (Dev)`);
          summary.push(`Base: \`${base}\``);
          summary.push(`Path: \`/wp-content/plugins/persy/interface/qa/orders/?auth=***\``);
          summary.push(`Checked last ${orders.length} orders.`);
          if (invalid.length === 0) {
            summary.push(`✅ **All orders have required fields populated.**`);
          } else {
            summary.push(`❌ **${invalid.length} order(s) missing required fields:**`);
            for (const o of invalid) {
              summary.push(`- WooCommerce ID \`${o.woocommerceId}\`: missing ${o.missing.join(", ")}`);
            }
          }
          if (process.env.GITHUB_STEP_SUMMARY) {
            await fs.appendFile(process.env.GITHUB_STEP_SUMMARY, summary.join("\n") + "\n");
          }

          if (invalid.length > 0) {
            console.error("❌ One or more orders are missing required fields. See summary above.");
            process.exit(1);
          } else {
            console.log("✅ All required fields present for the last 10 orders.");
          }
          EOF

          node check-orders.mjs

      - name: Upload API response (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: orders-response
          path: |
            orders-response.json
            orders-response.txt
          retention-days: 7
